<?php

/**
 * @file
 * Schema and install hooks for commerce_pos.
 */

/**
 * Implements hook_schema().
 */
function commerce_pos_schema() {
  $schema['commerce_pos_transaction'] = array(
    'description' => 'The base table for POS transactions',
    'fields' => array(
      'transaction_id' => array(
        'description' => 'The primary identifier for a transaction.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The user ID that this transaction belongs to, generally the employee logged into the POS.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'cashier' => array(
        'description' => 'The ID of the cashier that the transaction belongs to. Generally the last cashier to update the transaction.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'order_id' => array(
        'description' => 'The order ID for this transaction.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' => array(
        'description' => 'The type of transaction this is. E.g. sale or return',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'register_id' => array(
        'description' => 'The physical register that this transaction was performed at.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'description' => 'A serialized array of additional data.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the transaction was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the transaction was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'completed' => array(
        'description' => 'The Unix timestamp when the transaction completed.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'transaction_order_id' => array('order_id'),
      'transaction_uid' => array('uid'),
      'register_id' => array('register_id'),
    ),
    'unique keys' => array(
      'order_id_uid' => array('order_id', 'uid'),
    ),
    'primary key' => array('transaction_id'),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function commerce_pos_uninstall() {
  // Clean up variables.
  variable_del('commerce_pos_search_api_index');
  variable_del('commerce_pos_available_products');
  variable_del('commerce_pos_search_results_count');

  foreach (commerce_product_types() as $name => $type) {
    variable_del('commerce_pos_image_field_' . $name);

    // Also remove any default images.
    if ($fid = variable_get('commerce_pos_image_default_' . $name, 0)) {
      $file = file_load($fid);
      file_delete($file, TRUE);
    }

    variable_del('commerce_pos_image_default_' . $name);
  }
}

/**
 * Implements hook_requirements().
 */
function commerce_pos_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    $t = get_t();
    $jquery = drupal_get_library('system', 'jquery');
    $version = $jquery['version'];
    $requirements['commerce_pos'] = array(
      'title' => $t('Commerce Point of Sale'),
      'severity' => REQUIREMENT_OK,
      'value' => $t('jQuery %jquery (<a href="@link">configure</a>)', array(
        '%jquery' => $jquery['version'],
        '@link' => url('admin/config/development/jquery_update'),
      )),
    );

    if (version_compare($version, '1.7', '<')) {
      $requirements['commerce_pos']['severity'] = REQUIREMENT_ERROR;
      $requirements['commerce_pos']['description'] = $t('Commerce Point of Sale requires jQuery 1.7 or higher.');
    }
  }

  return $requirements;
}

/**
 * Implements hook_enable().
 */
function commerce_pos_enable() {
  commerce_pos_user_phone_number_configure();
}

/**
 * Change 'type' field from an integer field to a varchar.
 */
function commerce_pos_update_7001(&$sandbox) {
  db_change_field('commerce_pos_transaction', 'type', 'type', array(
    'description' => 'The type of transaction this is. E.g. sale or return',
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '',
  ));

  db_update('commerce_pos_transaction')
    ->fields(array(
      'type' => CommercePosService::TRANSACTION_TYPE_RETURN,
    ))
    ->condition('type', 2)
    ->execute();

  db_update('commerce_pos_transaction')
    ->fields(array(
      'type' => CommercePosService::TRANSACTION_TYPE_SALE,
    ))
    ->condition('type', 1)
    ->execute();
}

/**
 * Add 'completed' field to transactions table.
 */
function commerce_pos_update_7002(&$sandbox) {
  db_add_field('commerce_pos_transaction', 'completed', array(
    'description' => 'The Unix timestamp when the transaction completed.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  ));
}

/**
 * Enable cashier sub-module.
 */
function commerce_pos_update_7203() {
  $t = get_t();

  db_add_field('commerce_pos_transaction', 'cashier', array(
    'description' => 'The ID of the cashier that the transaction belongs to. Generally the last cashier to update the transaction.',
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
    'initial' => 0,
  ));

  module_enable(array('commerce_pos_cashier'));

  return $t('This Point of Sale update introduces Cashiers, which are required to operate the POS. Please go !link to add one or more now.', array(
    '!link' => l(t('here'), 'admin/commerce/config/pos/cashiers'),
  ));
}

/**
 * Update location_id to register_id.
 */
function commerce_pos_update_7204() {
  if (!db_field_exists('commerce_pos_transaction', 'register_id')) {
    $spec = array(
      'description' => 'The physical register that this transaction was performed at.',
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
    );

    db_add_field('commerce_pos_transaction', 'register_id', $spec);
    db_add_index('commerce_pos_transaction', 'register_id', array(array('register_id', 4)));

    // Check for existing data in the location_id column. If there is none, it's
    // safe to drop it now.
    $locations = db_select('commerce_pos_transaction', 'cpt')
      ->condition('cpt.location_id', 0, '!=')
      ->countQuery()
      ->execute()
      ->fetchField();

    if (!$locations) {
      db_drop_field('commerce_pos_transaction', 'location_id');
    }
  }
}

/**
 * Add 'phone' field to user entity.
 */
function commerce_pos_update_7205(&$sandbox) {
  commerce_pos_user_phone_number_configure();
}

/**
 * Configure the return line item type
 */
function commerce_pos_update_7206() {
  commerce_line_item_configure_line_item_fields(array('commerce_pos'));
}
