<?php

/**
 * @file
 * File of Commerce POS Report tests.
 */

/**
 * Basic report test cases.
 */
class CommercePosReportTestCase extends CommercePosBaseTestCase {
  protected $adminUser;
  protected $privilegedUser;

  /**
   * GetInfo().
   *
   * @{inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Commerce POS Report Tests',
      'description' => 'Ensure Commerce POS Report functions properly',
      'group' => 'Commerce POS',
    );
  }

  /**
   * Setup().
   *
   * @{inheritdoc}
   */
  public function setUp() {
    parent::setUp(array('commerce_pos_report'));

    $this->adminUser = $this->drupalCreateUser(array(
      'view commerce pos reports',
      'administer commerce pos report',
    ));

    $this->privilegedUser = $this->drupalCreateUser(array(
      'view commerce pos reports',
    ));
  }

  /**
   * Tests that all the menu hooks return pages.
   */
  public function testCommercePosReportMenu() {
    $this->drupalLogin($this->privilegedUser);

    $this->drupalGet('admin/commerce/pos/reports/end-of-day');
    $this->assertResponse(200, 'Privileged user was able to correctly access the End of Day report.');

    $this->drupalGet('admin/commerce/pos/reports/journal-role');
    $this->assertResponse(200, 'Privileged user was able to correctly access the Journal Role report.');

    $this->drupalLogin($this->adminUser);

    $this->drupalGet('admin/commerce/config/pos/reporting');
    $this->assertResponse(200, 'Admin user was able to correct access the POS report settings.');

    $this->drupalGet('admin/commerce/pos/reports/journal-role');
    $this->assertResponse(200, 'Admin user was able to correctly access the Journal Role report.');
  }

  /**
   * Tests that the end of day report runs and has correct values.
   */
  public function testCommercePosReportEndOfDay() {
    module_enable($this->setUpHelper('api', array('commerce_pos_payment')));

    // We need to reset this static so that we can use payment methods provided
    // by Commerce COP.
    drupal_static_reset('commerce_payment_methods');

    $this->drupalLogin($this->privilegedUser);
    $generated_totals = $this->generateTransactions();

    $this->drupalGet('admin/commerce/pos/reports/end-of-day');
    $this->assertResponse(200, 'User was able to access the End of Day report.');

    // Check the EOD report's expected amounts to make sure they match up with
    // the transactions we generated.
    foreach ($generated_totals as $payment_method => $totals) {
      $total_amount = $totals[CommercePosService::TRANSACTION_TYPE_SALE] + $totals[CommercePosService::TRANSACTION_TYPE_RETURN] + $totals[CommercePosService::TRANSACTION_TYPE_EXCHANGE];
      $expected_amount_element = $this->xpath('//div[@class="commerce-pos-report-expected-amount" and @data-payment-method-id="' . $payment_method . '"]');

      // Casting the xpath element to a string gets us the element's inner HTML.
      $expected_amount = (string) $expected_amount_element[0];
      $total_amount = commerce_pos_report_currency_format($total_amount, commerce_default_currency());

      $this->assertIdentical($expected_amount, $total_amount, FALSE, 'Expected amount for' . $payment_method . ' is correct.');
    }
  }

  /**
   * Generates POS transactions and payments for all of the default payment methods.
   *
   * @return array
   *   An associative array of generated totals, keyed by payment method and
   *   then by the transaction type (sale or return). E.g.:
   *
   *   array(
   *     'commerce_pos_payment_cash' => array(
   *       'sale' => 50000,
   *       'return' => 50000,
   *     )
   *   );
   */
  private function generateTransactions() {
    $location = $this->createDummyLocation();
    $register = $this->createDummyRegister($location->location_id);
    $float_amount = 20000;
    $this->createDummyFloat($register->register_id, $float_amount);

    $payment_methods = array(
      'commerce_pos_payment_cash',
      'commerce_pos_payment_credit',
      'commerce_pos_payment_debit',
      'commerce_pos_payment_gift_card',
    );

    $generated_totals = array();
    commerce_pos_register_set_current_register($register->register_id);

    $last_amount = 0;
    $dummy_product = NULL;

    // Generate some sales and returns for each payment method.
    foreach ($payment_methods as $payment_method) {
      for ($i = 0; $i < 20; $i++) {
        // Generally we want sales to outnumber returns.
        if ($i < 10) {
          $type = CommercePosService::TRANSACTION_TYPE_SALE;
        }
        elseif ($i < 15) {
          $type = CommercePosService::TRANSACTION_TYPE_RETURN;
        }
        else {
          $type = CommercePosService::TRANSACTION_TYPE_EXCHANGE;
        }

        // For Debit, we'll make it so that overall balance of transactions will
        // be negative. I.e. the returned amount will be more than the sales.
        if ($payment_method == 'commerce_pos_payment_debit' && $type == CommercePosService::TRANSACTION_TYPE_RETURN) {
          $amount = 20000;
        }
        else {
          $amount = 5000;
        }

        if ($last_amount === 0 || $last_amount != $amount) {
          $dummy_product = $this->createDummyProduct('', '', $amount);
        }

        $last_amount = $amount;

        $transaction = $this->createDummyTransaction($type, $this->privilegedUser->uid);

        $transaction->registerId = $register->register_id;

        if ($type == CommercePosService::TRANSACTION_TYPE_RETURN) {
          $transaction->doAction('addProduct', $dummy_product, 1, TRUE, NULL, 'commerce_pos_return');
          $this->createDummyPayment($transaction, $payment_method, -$amount);
        }
        elseif ($type == CommercePosService::TRANSACTION_TYPE_EXCHANGE) {
          $transaction->doAction('addProduct', $dummy_product);
          $transaction->doAction('addProduct', $dummy_product, 1, TRUE, NULL, 'commerce_pos_return');
        }
        else {
          $transaction->doAction('addProduct', $dummy_product);
          $this->createDummyPayment($transaction, $payment_method, $amount);
        }

        if (!isset($generated_totals[$payment_method][$type])) {
          $generated_totals[$payment_method][$type] = 0;
        }

        if ($type = CommercePosService::TRANSACTION_TYPE_RETURN) {
          $generated_totals[$payment_method][$type] -= $amount;
        }
        else {
          $generated_totals[$payment_method][$type] += $amount;
        }

        $transaction->doAction('saveOrder');
        $transaction->doAction('save');
        $transaction->doAction('completeTransaction');
      }

      if ($payment_method == 'commerce_pos_payment_cash') {
        // Add our float to the expected cash amount.
        $generated_totals[$payment_method][CommercePosService::TRANSACTION_TYPE_SALE] += $float_amount;
      }
    }

    return $generated_totals;
  }

}
