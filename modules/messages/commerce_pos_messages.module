<?php

/**
 * @file
 * commerce_pos_messages.module
 */

/**
 * Implements hook_views_api().
 */
function commerce_pos_messages_views_api($module = NULL, $api = NULL) {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'commerce_pos_messages') . '/includes/views',
  );
}

/**
 * Implements hook_form_alter().
 */
function commerce_pos_messages_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'commerce_pos_transaction_form':
      _commerce_pos_messages_transaction_form_alter($form, $form_state);
      break;
  }
}

/**
 * Adds order message functionality to the POS transaction forms.
 */
function _commerce_pos_messages_transaction_form_alter(&$form, &$form_state) {
  $form['#attached']['js'][] = drupal_get_path('module', 'commerce_pos_messages') . '/js/commerce_pos_messages.js';

  if (!empty($form_state['order_wrapper'])) {
    if (!empty($form_state['triggering_element']['#element_key']) && $form_state['triggering_element']['#element_key'] == 'submit-note') {
      $message_text = $form_state['values']['messages']['add']['note_text'];
      commerce_pos_messages_add_message($message_text, $form_state['order_wrapper']);

      // This prevents the note_text element below from still having the note
      // text filled in after submission.
      unset($form_state['values']['messages']['add']['note_text']);
      unset($form_state['input']['messages']['add']['note_text']);
    }

    $form['messages'] = array(
      '#type' => 'container',
      '#id' => 'commerce-pos-messages-wrapper',
      '#tree' => TRUE,
    );

    $form['messages']['add'] = array(
      '#type' => 'container',
      '#id' => 'commerce-pos-messages-add-note-wrapper',
    );

    $form['messages']['add']['add_note'] = array(
      '#type' => 'button',
      '#value' => t('Add Note'),
      '#ajax' => array(
        'wrapper' => 'commerce-pos-messages-add-note-wrapper',
        'callback' => 'commerce_pos_messages_add_note_js',
        'effect' => 'fade',
      ),
      '#element_key' => 'add-note',
    );

    if (!empty($form_state['triggering_element']['#element_key']) && $form_state['triggering_element']['#element_key'] == 'add-note') {
      // Change add note button into label.
      $form['messages']['add']['add_note'] = array(
        '#markup' => '<div class="commerce-pos-note-title">' . $form['messages']['add']['add_note']['#value'] . '</div>',
      );

      $form['messages']['add']['#attached']['js'][] = array(
        'type' => 'setting',
        'data' => array(
          'commercePosMessages' => array(
            'focusInput' => TRUE,
          ),
        ),
      );

      $form['messages']['add']['note_text'] = array(
        '#type' => 'textarea',
        '#required' => TRUE,
      );

      $form['messages']['add']['submit'] = array(
        '#type' => 'button',
        '#value' => t('Submit'),
        '#ajax' => array(
          'wrapper' => 'commerce-pos-messages-wrapper',
          'callback' => 'commerce_pos_messages_js',
          'effect' => 'fade',
        ),
        '#element_key' => 'submit-note',
      );

      $form['messages']['add']['cancel'] = array(
        '#type' => 'button',
        '#value' => t('Cancel'),
        '#ajax' => array(
          'wrapper' => 'commerce-pos-messages-wrapper',
          'callback' => 'commerce_pos_messages_js',
          'effect' => 'fade',
        ),
        '#limit_validation_errors' => array(),
        '#element_key' => 'cancel-note',
      );
    }

    $order_value = $form_state['order_wrapper']->value();
    $form['messages']['messages'] = array(
      '#markup' => commerce_pos_messages_transaction_messages($order_value),
    );
  }
}

/**
 * AJAX callback for the 'Add Note' button.
 */
function commerce_pos_messages_add_note_js($form, &$form_state) {
  return $form['messages']['add'];
}

/**
 * AJAX callback for the Note submit button.
 */
function commerce_pos_messages_js($form, &$form_state) {
  return $form['messages'];
}

/**
 * Adds a new Message entity to an order.
 */
function commerce_pos_messages_add_message($message_text, $order_wrapper) {
  if (!empty($message_text)) {
    $order_value = $order_wrapper->value();
    $message = entity_create('message', array('type' => 'commerce_order_admin_comment'));
    $wrapper = entity_metadata_wrapper('message', $message);
    $wrapper->message_commerce_body->value->set($message_text);
    $wrapper->message_commerce_order->set($order_value);
    message_save($message);
  }
}

/**
 * Display all admin messages for use in the POS interface.
 */
function commerce_pos_messages_transaction_messages($order) {
  $arguments = array($order->order_id);
  $view = views_get_view('commerce_pos_messages');
  $view->set_display('block');
  $view->set_arguments($arguments);
  $view->override_url = $_GET['q'];

  return $view->preview();
}
