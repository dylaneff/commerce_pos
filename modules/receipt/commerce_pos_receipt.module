<?php

/**
 * @file
 * Core hooks and utility functions for commerce_pos_receipts.
 */

/**
 * Implements hook_theme().
 */
function commerce_pos_receipt_theme($existing, $type, $theme, $path) {
  return array(
    'commerce_pos_receipt' => array(
      'template' => 'commerce-pos-receipt',
      'file' => 'commerce_pos_receipt.theme.inc',
      'path' => $path . '/theme',
      'variables' => array(
        'transaction' => NULL,
      ),
    ),
    'commerce_pos_receipt_order_info' => array(
      'template' => 'commerce-pos-receipt-order-info',
      'file' => 'commerce_pos_receipt.theme.inc',
      'path' => $path . '/theme',
      'variables' => array(
        'order' => NULL,
        'type' => NULL,
        'transacton' => NULL,
      ),
    ),
    'commerce_pos_receipt_payments_table' => array(
      'file' => 'commerce_pos_receipt.theme.inc',
      'path' => $path . '/theme',
      'variables' => array(
        'order_id' => 0,
        'return' => FALSE,
      ),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function commerce_pos_receipt_menu() {
  $items['admin/commerce/pos/%/print-receipt'] = array(
    'title' => 'Print Transaction Receipt',
    'page callback' => 'commerce_pos_receipt_print',
    'page arguments' => array(3),
    'access callback' => 'commerce_pos_receipt_print_access',
    'access arguments' => array(3),
    'file' => 'includes/commerce_pos_receipt.pages.inc',
  );

  $items['admin/commerce/config/pos/receipts'] = array(
    'title' => 'Receipts',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_pos_receipt_settings'),
    'access arguments' => array('administer pos receipt receipts'),
    'file' => 'includes/commerce_pos_receipt.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_commerce_pos_transaction_base_info().
 */
function commerce_pos_receipt_commerce_pos_transaction_base_info() {
  return array(
    'commerce_pos_receipt_base' => array(
      'class' => 'CommercePosReceiptBase',
      'types' => array(
        CommercePosService::TRANSACTION_TYPE_SALE,
        CommercePosService::TRANSACTION_TYPE_RETURN,
      ),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function commerce_pos_receipt_permission() {
  return array(
    'administer pos receipt receipts' => array(
      'title' => t('Administer POS receipt settings'),
    ),
  );
}

/**
 * Implements hook_conditions_info().
 */
function commerce_pos_receipt_rules_condition_info() {
  $conditions = array(
    'commerce_pos_receipt_rules_condition_check_email_receipt' => array(
      'group' => t('Commerce POS'),
      'label' => t('Check email receipt'),

      'parameter' => array(
        'commerce_order' => array(
          'type' => 'commerce_order',
          'label' => t('Commerce Order'),
        ),
      ),
    ),
  );

  return $conditions;
}

/**
 * Callback for commerce_pos_receipt_rules condition.
 */
function commerce_pos_receipt_rules_condition_check_email_receipt($order) {
  $query = db_query('SELECT data FROM {commerce_pos_transaction} c
                      WHERE c.order_id = :order_id', array(
                        ':order_id' => $order->order_id,
                      ));
  $result = $query->fetchAssoc();

  if ($result) {
    $data = unserialize(($result['data']));
    return (in_array($data['commerce_pos_receipt_option'], array('email', 'print_email')));
  }

  return FALSE;
}

/**
 * Implements hook_commerce_pos_sale_form_ajax_alter().
 */
function commerce_pos_receipt_commerce_pos_sale_form_ajax_alter(&$form_state, $triggering_element) {
  if ($triggering_element['#element_key'] == 'commerce_pos_receipt_options') {
    /* @var CommercePosTransaction $transaction */
    $transaction = $form_state['transaction'];
    $option = FALSE;

    if (isset($form_state['values']['transaction_options']['receipt_options'])) {
      $option = $form_state['values']['transaction_options']['receipt_options'];
    }
    elseif (isset($form_state['values']['receipt_options'])) {
      $option = $form_state['values']['receipt_options'];
    }

    if ($option) {
      $transaction->data['commerce_pos_receipt_option'] = $option;
      $transaction->doAction('save');
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function commerce_pos_receipt_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'commerce_pos_transaction_form':
      _commerce_pos_receipt_transaction_form_alter($form, $form_state);
      break;

    case 'commerce_pos_payment':
      _commerce_pos_receipt_payment_form_alter($form, $form_state);
      break;
  }
}

/**
 * Adds previous receipt printing functionality to the POS transaction forms.
 */
function _commerce_pos_receipt_transaction_form_alter(&$form, &$form_state) {
  // Attach libraries and JS needed to print a receipt.
  $js_settings = array(
    'commercePosReceipt' => array(
      'cssUrl' => url(drupal_get_path('module', 'commerce_pos_receipt') . '/css/commerce_pos_receipt.css', array(
        'absolute' => TRUE,
      )),
    ),
  );

  if (isset($_SESSION['commerce_pos_receipt_previous_transaction'])) {
    $form['parked_transactions']['print_previous'] = array(
      '#markup' => l(t('Print Previous Transaction Receipt'), 'admin/commerce/pos/' . $_SESSION['commerce_pos_receipt_previous_transaction'] . '/print-receipt', array(
        'attributes' => array(
          'class' => array('use-ajax', 'commerce-pos-receipt-print-previous'),
        ),
      )),
    );
  }

  if (isset($_SESSION['commerce_pos_print_transaction'])) {
    $js_settings['commercePosReceipt']['printInfo'] = array(
      'transactionId' => $_SESSION['commerce_pos_print_transaction'],
      'printUrl' => url('admin/commerce/pos/' . $_SESSION['commerce_pos_print_transaction'] . '/print-receipt'),
    );

    unset($_SESSION['commerce_pos_print_transaction']);
  }

  $wrapper_ajax = array(
    'wrapper' => $form_state['wrapper_id'],
    'callback' => 'commerce_pos_receipt_wrapper_js',
  );

  $order_wrapper = !empty($form_state['order_wrapper']) ? $form_state['order_wrapper'] : FALSE;
  if (_commerce_pos_receipt_check_order_for_line_items($order_wrapper)) {
    $form['transaction_options']['receipt_options'] = array(
      '#type' => 'select',
      '#options' => array(
        'print' => t('Print'),
        'email' => t('Email'),
        'print_email' => t('Print and Email'),
      ),
      '#title' => t('Receipt Options'),
      '#element_validate' => array('commerce_pos_receipt_validate_email'),
      '#ajax' => $wrapper_ajax,
      '#element_key' => 'commerce_pos_receipt_options',
      '#default_value' => !empty($form_state['transaction']->data['commerce_pos_receipt_option']) ? $form_state['transaction']->data['commerce_pos_receipt_option'] : NULL,
    );
  }

  $form['#attached']['libraries_load'][] = array('jquery-print');
  $form['#attached']['js'][] = drupal_get_path('module', 'commerce_pos_receipt') . '/js/commerce_pos_receipt.js';
  $form['#attached']['js'][] = array(
    'type' => 'setting',
    'data' => $js_settings,
  );
}

/**
 * Checks to see if order has line items and returns true if it does, or false otherwise.
 */
function _commerce_pos_receipt_check_order_for_line_items($order_wrapper) {
  $has_line_items = FALSE;
  if ($order_wrapper) {
    $line_items = $order_wrapper->commerce_line_items->value();

    if ($line_items) {
      $has_line_items = TRUE;
    }
  }
  return $has_line_items;
}

/**
 * Adds receipt-printing functionality to the POS payment forms.
 */
function _commerce_pos_receipt_payment_form_alter(&$form, &$form_state) {
  // Attach libraries and JS needed to print a receipt.
  $js_settings = array(
    'commercePosReceipt' => array(
      'cssUrl' => url(drupal_get_path('module', 'commerce_pos_receipt') . '/css/commerce_pos_receipt.css', array(
        'absolute' => TRUE,
      )),
    ),
  );

  // Adds the print option to the transaction data array.
  if (isset($form_state['values']['receipt_options'])) {
    if (strpos($form_state['values']['receipt_options'], 'Print') !== FALSE) {
      if (!in_array('print', $form_state['transaction']->data)) {
        $form_state['transaction']->data[] = 'print';
      }
    }
    else {
      // Remove print from the data array to prevent printing receipt.
      $key = array_search('print', $form_state['transaction']->data);
      if ($key !== FALSE) {
        unset($form_state['transaction']->data[$key]);
      }
    }
  }

  $form['#attached']['libraries_load'][] = array('jquery-print');
  $form['#attached']['js'][] = drupal_get_path('module', 'commerce_pos_receipt') . '/js/commerce_pos_receipt.js';
  $form['#attached']['js'][] = array(
    'type' => 'setting',
    'data' => $js_settings,
  );

  $wrapper_ajax = array(
    'wrapper' => $form_state['wrapper_id'],
    'callback' => 'commerce_pos_receipt_wrapper_js',
  );

  $order_wrapper = !empty($form_state['order_wrapper']) ? $form_state['order_wrapper'] : FALSE;
  if (_commerce_pos_receipt_check_order_for_line_items($order_wrapper)) {
    $form['balance']['actions']['receipt_options'] = array(
      '#type' => 'select',
      '#options' => array(
        'print' => t('Print'),
        'email' => t('Email'),
        'print_email' => t('Print and Email'),
      ),
      '#title' => t('Receipt Options'),
      '#element_validate' => array('commerce_pos_receipt_validate_email'),
      '#ajax' => $wrapper_ajax,
      '#weight' => 80,
      '#submit' => array('commerce_pos_receipt_submit'),
      '#element_key' => 'commerce_pos_receipt_options',
      '#default_value' => !empty($form_state['transaction']->data['commerce_pos_receipt_option']) ? $form_state['transaction']->data['commerce_pos_receipt_option'] : NULL,
    );

    array_unshift($form['balance']['actions']['finish']['#submit'], 'commerce_pos_receipt_options_submit');
  }
}

/**
 * Checks to see if the email provided is valid.
 */
function commerce_pos_receipt_validate_email($element, $form_state) {
  if (!empty($form_state['values']['receipt_options']) || !empty($form_state['values']['transaction_options']['receipt_options'])) {
    $option = !empty($form_state['values']['receipt_options']) ? $form_state['values']['receipt_options'] : $form_state['values']['transaction_options']['receipt_options'];
    if ($option == 'email' || $option == 'print_email') {
      $customer_email = isset($form_state['values']['email']) ? $form_state['values']['email'] : $form_state['values']['transaction_options']['customer']['email'];
      if (!valid_email_address($customer_email)) {
        form_error($element, 'A valid email address is required to email receipt');
      }
    }
  }
}

/**
 * Extra payment submit handler for receipt functionality.
 *
 * This just ensures that a receipt option has been set for the transaction.
 */
function commerce_pos_receipt_options_submit($form, &$form_state) {
  if (empty($form_state['transaction']->data['commerce_pos_receipt_option'])) {
    $form_state['transaction']->data['commerce_pos_receipt_option'] = 'print';
  }
}

/**
 * AJAX callback for returning the sale form's wrapper.
 */
function commerce_pos_receipt_wrapper_js($form, &$form_state) {
  return $form;
}

/**
 * Access callback for printing a receipt.
 */
function commerce_pos_receipt_print_access($transaction_id) {
  global $user;

  $access = FALSE;

  if (user_access('administer commerce pos')) {
    $access = TRUE;
  }
  elseif (user_access('process commerce pos sales')) {
    $transaction = CommercePosService::loadTransaction($transaction_id);
    if ($transaction->uid == $user->uid) {
      $access = TRUE;
    }
  }

  return $access;
}

/**
 * Builds a render array to be used in a POS receipt body.
 *
 * The array contains various order info, a summary of the line items, order
 * totals, and payments received (and change given if applicable).
 */
function commerce_pos_receipt_build_receipt_body($order) {
  $output = array();

  $rows = array();
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $transaction = CommercePosService::getOrderTransaction($order->order_id);
  $return = $transaction->type == CommercePosService::TRANSACTION_TYPE_RETURN;

  // @TODO: make the types of line items that show up here configurable.
  foreach ($wrapper->commerce_line_items as $delta => $line_item) {
    if (!$line_item->value()) {
      // Handle broken line items by not skipping them - not sure what else to do here.
      continue;
    }
    $row = array(
      array(
        'data' => commerce_line_item_title($line_item->value()),
        'class' => array('component-name'),
      ),
      array(
        'data' => commerce_pos_commerce_currency_format(
            $line_item->commerce_total->amount->raw(),
            $line_item->commerce_total->currency_code->raw(),
            $line_item
        ),
        'class' => array('component-total'),
      ),
    );

    $first_row = array(
      'data' => $row,
      'class' => array('line-item'),
      'data-line-item-id' => $line_item->line_item_id->raw(),
    );

    $second_row = FALSE;

    if ($line_item->__isset('commerce_product') && $line_item->commerce_product->getIdentifier()) {
      $first_row['class'][] = 'has-details';

      $row = array(
        array(
          'data' => t('@sku x@qty @ @price', array(
            '@sku' => $line_item->commerce_product->sku->value(),
            '@qty' => (int) $line_item->quantity->value(),
            '@price' => commerce_pos_commerce_currency_format(
                $line_item->commerce_unit_price->amount->raw(),
                $line_item->commerce_unit_price->currency_code->raw(),
                $line_item
            ),
          )),
          'colspan' => 2,
        ),
      );

      $second_row = array(
        'data' => $row,
        'class' => array('line-item-details'),
        'data-line-item-id' => $line_item->line_item_id->raw(),
      );
    }

    $rows[] = $first_row;

    if ($second_row) {
      $rows[] = $second_row;
    }
  }

  $rows[count($rows) - 1]['class'][] = 'last';

  $output['info'] = array(
    '#theme' => 'commerce_pos_receipt_order_info',
    '#order' => $order,
    '#type' => $transaction->type,
    '#transaction' => $transaction,
    '#weight' => -10,
  );

  $output['line_items'] = array(
    '#theme' => 'table',
    '#rows' => $rows,
    '#empty' => 'No Items in order.',
    '#attributes' => array('class' => array('commerce-pos-order')),
    '#weight' => 5,
  );

  $order_total = commerce_pos_price_order_format($wrapper, 'commerce_order_total', TRUE);
  $output['total']['#markup'] = render($order_total);
  $output['total']['#weight'] = 10;

  $output['payments'] = array(
    '#theme' => 'commerce_pos_receipt_payments_table',
    '#order_id' => $order->order_id,
    '#return' => $return,
    '#weight' => 15,
  );

  return $output;
}

/**
 * Implements hook_default_message_type().
 */
function commerce_pos_receipt_default_message_type() {
  $items['commerce_pos_email_receipt'] = entity_import('message_type', '{
    "name" : "commerce_pos_email_receipt",
    "description" : "Commerce POS: Email Receipt",
    "argument_keys" : [],
    "argument" : [],
    "category" : "commerce_order_message",
    "data" : {
      "token options" : { "clear" : 0 },
      "purge" : { "override" : 0, "enabled" : 0, "quota" : "", "days" : "" }
    },
    "language" : "",
    "arguments" : null,
    "message_text" : { "und" : [
        {
          "value" : "Thanks for stopping by!",
          "format" : "commerce_order_message"
        }
      ]
    }
  }');

  return $items;
}

/**
 * Configures email receipt fields.
 */
function commerce_pos_receipt_configure_fields() {
  $field_name = 'commerce_pos_order_id';
  $field = field_info_field($field_name);
  $instance = field_info_instance('commerce_pos_register', $field_name, 'commerce_pos_register');

  if (empty($field)) {
    $field = array(
      'active' => 1,
      'cardinality' => 1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => $field_name,
      'indexes' => array(),
      'locked' => 0,
      'module' => 'number',
      'settings' => array(),
      'translatable' => 0,
      'type' => 'number_integer',
    );

    field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'bundle' => 'commerce_pos_email_receipt',
      'default_value' => NULL,
      'deleted' => 0,
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'number',
          'settings' => array(
            'decimal_separator' => '.',
            'prefix_suffix' => TRUE,
            'scale' => 0,
            'thousand_separator' => '',
          ),
          'type' => 'number_integer',
          'weight' => 0,
        ),
        'message_notify_email_body' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
        'message_notify_email_subject' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'entity_type' => 'message',
      'field_name' => $field_name,
      'label' => 'Order ID',
      'required' => 0,
      'settings' => array(
        'max' => '',
        'min' => '',
        'prefix' => '',
        'suffix' => '',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 0,
        'module' => 'number',
        'settings' => array(),
        'type' => 'number',
        'weight' => 1,
      ),
    );

    field_create_instance($instance);
  }
}
